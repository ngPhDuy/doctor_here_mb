import React, { useState, useEffect } from "react";
import { Text, View } from "react-native";
import { ScrollView } from "react-native-gesture-handler";
// UI Components
import Toast from "react-native-toast-message";
import LoadingAnimation from "../../components/ui/LoadingAnimation";
import HealthMetricCard from "../../components/HealthMetrics/HealthMetricCard";

// Health Connect Permissions & Initialization
import { ACTIVITY_PERMISSIONS } from "../../services/healthConnect/permissions";
import { checkAndRequestPermissions } from "../../services/healthConnect/healthConnectPermissions";
import { initializeHealthConnect } from "../../services/healthConnect/healthConnect";

import SelectField from "../../components/ui/SelectField";
import { convertOptionToInterval } from "../../utils/validators";

// Health Records
import {
  getTodayHealthRecord,
  getActivityRecord,
} from "../../utils/readHealthRecords";

import { HealthRecord } from "../../types/types";
import HealthMetricsLineChart from "../../components/HealthMetrics/HealthMetricsLineChart";

const displayOptions = [
  { title: "Ngày", icon: "calendar-today" },
  { title: "Tuần", icon: "calendar-week" },
  { title: "Tháng", icon: "calendar-month" },
  { title: "Năm", icon: "calendar-multiple" },
];

const ActivityScreen = ({ navigation }: any) => {
  const [loading, setLoading] = useState(false);
  const [latestStepsRecord, setLatestStepsRecord] = useState<number>();
  const [latestDistanceRecord, setLatestDistanceRecord] = useState<number>();

  const [stepsRecords, setStepsRecords] = useState<HealthRecord[]>([]);
  const [distanceRecords, setDistanceRecords] = useState<HealthRecord[]>([]);

  const [stepsDisplayOption, setStepsDisplayOption] = useState("Ngày");
  const [distanceDisplayOption, setDistanceDisplayOption] = useState("Ngày");

  const [stepCurrentMonth, setstepCurrentMonth] = useState(new Date());

  const [stepCurrentYear, setstepCurrentYear] = useState(new Date());

  const init = async () => {
    await initializeHealthConnect();
    const hasPermission = await checkAndRequestPermissions(
      ACTIVITY_PERMISSIONS
    );
    return hasPermission;
  };

  const fetchLatestData = async () => {
    const latestSteps = await getTodayHealthRecord("Steps");
    const latestDistance = await getTodayHealthRecord("Distance");

    if (latestSteps) setLatestStepsRecord(latestSteps);
    if (latestDistance) setLatestDistanceRecord(latestDistance);
  };

  const fetchRecords = async () => {
    const now = new Date();
    const past = new Date();
    past.setMonth(now.getMonth() - 1); // lấy trong 12 tháng gần nhất

    const stepsInterval = convertOptionToInterval(stepsDisplayOption);
    const distanceInterval = convertOptionToInterval(distanceDisplayOption);

    const stepsRecords = await getActivityRecord(
      "Steps",
      past.toISOString(),
      now.toISOString(),
      stepsInterval
    );
    const distanceRecords = await getActivityRecord(
      "Distance",
      past.toISOString(),
      now.toISOString(),
      distanceInterval
    );

    if (stepsRecords) {
      setStepsRecords(stepsRecords);
    }
    if (distanceRecords) {
      setDistanceRecords(distanceRecords);
    }
  };

  useEffect(() => {
    const initAndFetch = async () => {
      setLoading(true);
      const hasPermission = await init();
      if (!hasPermission) {
        navigation.goBack();
        return;
      }
      await fetchLatestData();
      await fetchRecords();
      setLoading(false);
    };
    initAndFetch();
  }, []);

  useEffect(() => {
    fetchRecords();
  }, [stepsDisplayOption, distanceDisplayOption]);
  const handleChangeMonthOrYear = (
    direction: "prev" | "next",
    type: "month" | "year"
  ) => {
    if (type === "month") {
      let newDate = new Date(stepCurrentMonth);

      if (direction === "next") {
        newDate.setMonth(newDate.getMonth() + 1);
      } else {
        newDate.setMonth(newDate.getMonth() - 1);
      }

      setstepCurrentMonth(newDate);
    } else if (type === "year") {
      let newDate = new Date(stepCurrentYear);

      if (direction === "next") {
        newDate.setFullYear(newDate.getFullYear() + 1);
      } else {
        newDate.setFullYear(newDate.getFullYear() - 1);
      }

      setstepCurrentYear(newDate);
    }
  };

  return (
    <ScrollView className="flex-1 p-4 bg-white">
      {loading ? (
        <LoadingAnimation />
      ) : (
        <View className="flex-row justify-between mb-4">
          <HealthMetricCard
            label="Bước đi"
            unit="bước"
            value={latestStepsRecord}
            imageSource={require("../../assets/healthMetrics/stepCount.png")}
          />
          <HealthMetricCard
            label="Quãng đường"
            unit="mét"
            value={latestDistanceRecord?.toFixed(2)}
            imageSource={require("../../assets/healthMetrics/distance.png")}
          />
        </View>
      )}

      {/* Biểu đồ bước chân */}
      {stepsRecords.length > 0 && (
        <>
          <View className="flex-row justify-between items-center">
            <View className="flex-1">
              <Text className="text-lg font-bold">Biểu đồ số bước chân</Text>
            </View>
            <View className="w-40">
              <SelectField
                label=""
                data={displayOptions}
                value={stepsDisplayOption || ""}
                placeholder="Kiểu hiển thị"
                onChange={(val) => setStepsDisplayOption(val)}
              />
            </View>
          </View>
          <HealthMetricsLineChart healthMetricsLineData={stepsRecords} />
        </>
      )}

      {/* Biểu đồ quãng đường di chuyển*/}
      {distanceRecords.length > 0 && (
        <>
          <View className="flex-row justify-between items-center">
            <View className="flex-1">
              <Text className="text-lg font-bold">
                Biểu đồ quãng đường di chuyển
              </Text>
            </View>
            <View className="w-40">
              <SelectField
                label=""
                data={displayOptions}
                value={distanceDisplayOption || ""}
                placeholder="Kiểu hiển thị"
                onChange={(val) => setDistanceDisplayOption(val)}
              />
            </View>
          </View>
          <HealthMetricsLineChart healthMetricsLineData={distanceRecords} />
        </>
      )}
    </ScrollView>
  );
};

export default ActivityScreen;
          {/* <View className="py-2 px-4 mt-3 flex-row justify-center items-center gap-5">
            <TouchableOpacity
              onPress={() =>
                handleChangeMonthOrYear(
                  "prev",
                  stepsDisplayOption === "Ngày" || stepsDisplayOption === "Tuần"
                    ? "month"
                    : "year"
                )
              }
            >
              <FontAwesome5 name="chevron-left" size={20} color="#374151" />
            </TouchableOpacity>

            <Text className="text-base text-gray-700 font-semibold">
              {stepsDisplayOption === "Ngày" || stepsDisplayOption === "Tuần"
                ? `Tháng ${stepCurrentMonth}`
                : `Năm ${stepCurrentYear}`}
            </Text>

            <TouchableOpacity
              onPress={() =>
                handleChangeMonthOrYear(
                  "next",
                  stepsDisplayOption === "Ngày" || stepsDisplayOption === "Tuần"
                    ? "month"
                    : "year"
                )
              }
            >
              <FontAwesome5 name="chevron-right" size={20} color="#374151" />
            </TouchableOpacity>
          </View> */}