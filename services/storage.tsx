import AsyncStorage from "@react-native-async-storage/async-storage";
import { Doctor } from "../types/types";
import moment from "moment";

const FAVORITE_DOCTORS_KEY = "favorite_doctors";

export const storeAuthData = async (
  userId: string,
  token: string,
  role: string,
  username: string,
  fullName: string,
  avtUrl: string
) => {
  try {
    console.log("L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p:");
    await AsyncStorage.setItem("user_id", userId);
    await AsyncStorage.setItem("auth_token", token);
    await AsyncStorage.setItem("user_role", role);
    await AsyncStorage.setItem("username", username);
    await AsyncStorage.setItem("full_name", fullName);
    await AsyncStorage.setItem("avt_url", avtUrl);
  } catch (error) {
    console.error("L·ªói khi l∆∞u token:", error);
  }
};

/**L·∫•y Auth data */
export const getAuthData = async () => {
  try {
    const userId = await AsyncStorage.getItem("user_id");
    const token = await AsyncStorage.getItem("auth_token");
    const role = await AsyncStorage.getItem("user_role");
    const username = await AsyncStorage.getItem("username");
    const fullName = await AsyncStorage.getItem("full_name");
    const avtUrl = await AsyncStorage.getItem("avt_url");

    return { userId, token, role, username, fullName, avtUrl };
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p:", error);
    return null;
  }
};
/**
 * L∆∞u user ID v√†o AsyncStorage
 */
export const storeUserID = async (userId: string): Promise<void> => {
  try {
    await AsyncStorage.setItem("user_id", userId);
  } catch (error) {
    console.error("L·ªói khi l∆∞u user ID:", error);
  }
};

/**
 * L·∫•y user ID t·ª´ AsyncStorage
 */
export const getUserID = async (): Promise<string | null> => {
  try {
    return await AsyncStorage.getItem("user_id");
  } catch (error) {
    console.error("L·ªói khi l·∫•y user ID:", error);
    return null;
  }
};

/**
 * X√≥a user ID kh·ªèi AsyncStorage (ƒêƒÉng xu·∫•t)
 */
export const removeUserID = async (): Promise<void> => {
  try {
    await AsyncStorage.removeItem("user_id");
  } catch (error) {
    console.error("L·ªói khi x√≥a user ID:", error);
  }
};

/*
 *L·∫•y username t·ª´ AsyncStorage
 */
export const getUsername = async (): Promise<string | null> => {
  try {
    return await AsyncStorage.getItem("username");
  } catch (error) {
    console.error("L·ªói khi l·∫•y username:", error);
    return null;
  }
};

/**L∆∞u username */
export const storeUsername = async (username: string): Promise<void> => {
  try {
    await AsyncStorage.setItem("username", username);
  } catch (error) {
    console.error("L·ªói khi l∆∞u username:", error);
  }
};
/**
 * L∆∞u JWT Token v√†o AsyncStorage
 */
export const storeToken = async (token: string): Promise<void> => {
  try {
    await AsyncStorage.setItem("auth_token", token);
  } catch (error) {
    console.error("L·ªói khi l∆∞u token:", error);
  }
};

/**
 * L·∫•y JWT Token t·ª´ AsyncStorage
 */
export const getToken = async (): Promise<string | null> => {
  try {
    return await AsyncStorage.getItem("auth_token");
  } catch (error) {
    console.error("L·ªói khi l·∫•y token:", error);
    return null;
  }
};

/**
 * X√≥a JWT Token kh·ªèi AsyncStorage (ƒêƒÉng xu·∫•t)
 */
export const removeToken = async (): Promise<void> => {
  try {
    await AsyncStorage.removeItem("auth_token");
  } catch (error) {
    console.error("L·ªói khi x√≥a token:", error);
  }
};

/**L·∫•y avt c·ªßa user */
export const getAvt = async (): Promise<string | null> => {
  try {
    return await AsyncStorage.getItem("avt_url");
  } catch (error) {
    console.error("L·ªói khi l·∫•y avt:", error);
    return null;
  }
};

/**L∆∞u avt c·ªßa user */
export const storeAvt = async (avtUrl: string): Promise<void> => {
  try {
    await AsyncStorage.setItem("avt_url", avtUrl);
  } catch (error) {
    console.error("L·ªói khi l∆∞u avt:", error);
  }
};

/** L∆∞u full name c·ªßa user */
export const storeFullName = async (fullName: string): Promise<void> => {
  try {
    await AsyncStorage.setItem("full_name", fullName);
  } catch (error) {
    console.error("L·ªói khi l∆∞u full name:", error);
  }
};

/**
 * Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
 */
export const isUserLoggedIn = async (): Promise<boolean> => {
  const userId = await getUserID();
  const token = await getToken();
  return !!userId && !!token; // Tr·∫£ v·ªÅ `true` n·∫øu c·∫£ user ID v√† token ƒë·ªÅu t·ªìn t·∫°i
};

/**
 * L∆∞u danh s√°ch b√°c sƒ© y√™u th√≠ch v√†o AsyncStorage
 */
export const storeFavoriteDoctors = async (
  doctors: Doctor[]
): Promise<void> => {
  try {
    const jsonValue = JSON.stringify(doctors);
    await AsyncStorage.setItem(FAVORITE_DOCTORS_KEY, jsonValue);
    console.log("ƒê√£ c·∫≠p nh·∫≠t danh s√°ch b√°c sƒ© y√™u th√≠ch");
  } catch (error) {
    console.error("L·ªói khi l∆∞u danh s√°ch b√°c sƒ© y√™u th√≠ch:", error);
  }
};

/**
 * L·∫•y danh s√°ch b√°c sƒ© y√™u th√≠ch t·ª´ AsyncStorage
 */
export const getFavoriteDoctors = async (): Promise<Doctor[]> => {
  try {
    const jsonValue = await AsyncStorage.getItem(FAVORITE_DOCTORS_KEY);
    return jsonValue ? JSON.parse(jsonValue) : [];
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch b√°c sƒ© y√™u th√≠ch:", error);
    return [];
  }
};

/**
 * Ki·ªÉm tra xem m·ªôt b√°c sƒ© c√≥ n·∫±m trong danh s√°ch y√™u th√≠ch hay kh√¥ng
 */
export const isDoctorFavorite = async (doctorId: string): Promise<boolean> => {
  try {
    const doctors = await getFavoriteDoctors();
    return doctors.some((doctor) => doctor.id === doctorId);
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra b√°c sƒ© y√™u th√≠ch:", error);
    return false;
  }
};

/**
 * Th√™m m·ªôt b√°c sƒ© v√†o danh s√°ch y√™u th√≠ch
 */
export const addFavoriteDoctor = async (doctor: Doctor): Promise<void> => {
  try {
    const doctors = await getFavoriteDoctors();
    if (!doctors.some((d) => d.id === doctor.id)) {
      doctors.push(doctor);
      await storeFavoriteDoctors(doctors);
    }
  } catch (error) {
    console.error("L·ªói khi th√™m b√°c sƒ© v√†o danh s√°ch y√™u th√≠ch:", error);
  }
};

/**
 * X√≥a m·ªôt b√°c sƒ© kh·ªèi danh s√°ch y√™u th√≠ch
 */
export const removeFavoriteDoctor = async (doctorId: string): Promise<void> => {
  try {
    let doctors = await getFavoriteDoctors();
    doctors = doctors.filter((doctor) => doctor.id !== doctorId);
    await storeFavoriteDoctors(doctors);
  } catch (error) {
    console.error("L·ªói khi x√≥a b√°c sƒ© kh·ªèi danh s√°ch y√™u th√≠ch:", error);
  }
};

/*  Danh s√°ch c√°c ch·ªâ s·ªë s·ª©c kh·ªèe v√† key t∆∞∆°ng ·ª©ng
      Chi·ªÅu cao	"height_records"	ƒê∆°n v·ªã: cm
      C√¢n n·∫∑ng	"weight_records"	ƒê∆°n v·ªã: kg
      BMI: "bmi_records"	ƒê∆°n v·ªã: kg/m¬≤
      Nh·ªãp tim	"heart_rate_records"	ƒê∆°n v·ªã: BPM (Beats Per Minute)
      Nh·ªãp th·ªü: "respiratory_rate_records"	ƒê∆°n v·ªã: l·∫ßn/ph√∫t
      Huy·∫øt √°p t√¢m thu	"systolic_pressure_records"	ƒê∆°n v·ªã: mmHg
      Huy·∫øt √°p t√¢m tr∆∞∆°ng	"diastolic_pressure_records"	ƒê∆°n v·ªã: mmHg
      S·ªë b∆∞·ªõc ƒëi	"step_count_records"	ƒê∆°n v·ªã: s·ªë b∆∞·ªõc
      Qu√£ng ƒë∆∞·ªùng ƒëi b·ªô	"walking_distance_records"	ƒê∆°n v·ªã: km
*/

/* H√†m l∆∞u d·ªØ li·ªáu s·ª©c kh·ªèe */
export const storeHealthData = async (key: string, value: number) => {
  try {
    const currentDate = new Date().toISOString(); // L·∫•y ng√†y hi·ªán t·∫°i

    // L·∫•y d·ªØ li·ªáu c≈©
    const storedData = await AsyncStorage.getItem(key);
    const records = storedData ? JSON.parse(storedData) : [];

    // Th√™m b·∫£n ghi m·ªõi v√†o danh s√°ch
    const newRecord = { value, date: currentDate };
    records.push(newRecord);

    // L∆∞u l·∫°i m·∫£ng d·ªØ li·ªáu
    await AsyncStorage.setItem(key, JSON.stringify(records));
  } catch (error) {
    console.error(`L·ªói khi l∆∞u d·ªØ li·ªáu cho ${key}:`, error);
  }
};

/* H√†m l·∫•y d·ªØ li·ªáu s·ª©c kh·ªèe */
export const getHealthData = async (key: string) => {
  try {
    const storedData = await AsyncStorage.getItem(key);
    return storedData ? JSON.parse(storedData) : [];
  } catch (error) {
    console.error(`L·ªói khi l·∫•y d·ªØ li·ªáu cho ${key}:`, error);
    return [];
  }
};

/* üîπ H√†m t·∫°o d·ªØ li·ªáu gi·∫£ cho t·∫•t c·∫£ ch·ªâ s·ªë s·ª©c kh·ªèe v√† l∆∞u v√†o AsyncStorage */
export const generateAndStoreFakeHealthData = async () => {
  try {
    const today = moment();
    let bmiRecords = [];
    let heightRecords = [];
    let weightRecords = [];
    let heartRateRecords = [];
    let respiratoryRateRecords = [];
    let systolicPressureRecords = [];
    let diastolicPressureRecords = [];
    let stepCountRecords = [];
    let walkingDistanceRecords = [];

    for (let i = 0; i < 60; i++) {
      const date = today.clone().subtract(i, "days").toISOString();

      // T·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n ph√π h·ª£p cho t·ª´ng ch·ªâ s·ªë
      const height = Math.floor(150 + Math.random() * 30); // 150 - 180 cm
      const weight = parseFloat((45 + Math.random() * 35).toFixed(1)); // 45 - 80 kg
      const bmi = parseFloat((weight / (height / 100) ** 2).toFixed(2)); // BMI t·ª´ chi·ªÅu cao & c√¢n n·∫∑ng
      const heartRate = Math.floor(60 + Math.random() * 40); // 60 - 100 BPM
      const respiratoryRate = Math.floor(12 + Math.random() * 8); // 12 - 20 l·∫ßn/ph√∫t
      const systolicPressure = Math.floor(90 + Math.random() * 40); // 90 - 130 mmHg
      const diastolicPressure = Math.floor(60 + Math.random() * 30); // 60 - 90 mmHg
      const stepCount = Math.floor(1000 + Math.random() * 9000); // 1000 - 10000 b∆∞·ªõc
      const walkingDistance = parseFloat((stepCount * 0.0008).toFixed(2)); // Kho·∫£ng c√°ch t·ª´ s·ªë b∆∞·ªõc

      // Th√™m d·ªØ li·ªáu v√†o danh s√°ch
      heightRecords.push({ date, value: height });
      weightRecords.push({ date, value: weight });
      bmiRecords.push({ date, value: bmi });
      heartRateRecords.push({ date, value: heartRate });
      respiratoryRateRecords.push({ date, value: respiratoryRate });
      systolicPressureRecords.push({ date, value: systolicPressure });
      diastolicPressureRecords.push({ date, value: diastolicPressure });
      stepCountRecords.push({ date, value: stepCount });
      walkingDistanceRecords.push({ date, value: walkingDistance });
    }

    // L∆∞u v√†o AsyncStorage
    await AsyncStorage.multiSet([
      ["height_records", JSON.stringify(heightRecords.reverse())],
      ["weight_records", JSON.stringify(weightRecords.reverse())],
      ["bmi_records", JSON.stringify(bmiRecords.reverse())],
      ["heart_rate_records", JSON.stringify(heartRateRecords.reverse())],
      [
        "respiratory_rate_records",
        JSON.stringify(respiratoryRateRecords.reverse()),
      ],
      [
        "systolic_pressure_records",
        JSON.stringify(systolicPressureRecords.reverse()),
      ],
      [
        "diastolic_pressure_records",
        JSON.stringify(diastolicPressureRecords.reverse()),
      ],
      ["step_count_records", JSON.stringify(stepCountRecords.reverse())],
      [
        "walking_distance_records",
        JSON.stringify(walkingDistanceRecords.reverse()),
      ],
    ]);

    console.log("‚úÖ D·ªØ li·ªáu s·ª©c kh·ªèe gi·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o AsyncStorage!");
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu gi·∫£:", error);
  }
};

/*
 * x√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong AsyncStorage
 */
export const clearAsyncStorage = async () => {
  try {
    await AsyncStorage.clear();
    console.log("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong AsyncStorage!");
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a d·ªØ li·ªáu:", error);
  }
};
